{
  "version": 3,
  "sources": ["../../vuetify/src/composables/rounded.ts", "../../vuetify/src/composables/color.ts"],
  "sourcesContent": ["// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\ntype RoundedValue = boolean | string | number | null | undefined\n\nexport interface RoundedProps {\n  rounded?: RoundedValue\n  tile?: boolean\n}\n\ntype RoundedData = {\n  roundedClasses: Ref<string[]>\n}\n\n// Composables\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined,\n  },\n}, 'rounded')\n\nexport function useRounded (\n  props: RoundedProps | Ref<RoundedValue>,\n  name = getCurrentInstanceName(),\n): RoundedData {\n  const roundedClasses = computed(() => {\n    const rounded = isRef(props) ? props.value : props.rounded\n    const classes: string[] = []\n\n    if (rounded === true || rounded === '') {\n      classes.push(`${name}--rounded`)\n    } else if (\n      typeof rounded === 'string' ||\n      rounded === 0\n    ) {\n      for (const value of String(rounded).split(' ')) {\n        classes.push(`rounded-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { roundedClasses }\n}\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { destructComputed, isCssColor } from '@/util'\n\n// Types\nimport type { CSSProperties, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: Ref<{ background?: ColorValue, text?: ColorValue }>) {\n  return destructComputed(() => {\n    const classes: string[] = []\n    const styles: CSSProperties = {}\n\n    if (colors.value.background) {\n      if (isCssColor(colors.value.background)) {\n        styles.backgroundColor = colors.value.background\n      } else {\n        classes.push(`bg-${colors.value.background}`)\n      }\n    }\n\n    if (colors.value.text) {\n      if (isCssColor(colors.value.text)) {\n        styles.color = colors.value.text\n        styles.caretColor = colors.value.text\n      } else {\n        classes.push(`text-${colors.value.text}`)\n      }\n    }\n\n    return { colorClasses: classes, colorStyles: styles }\n  })\n}\n\nexport function useTextColor (color: Ref<ColorValue>): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): TextColorData {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(colors)\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: Ref<ColorValue>): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): BackgroundColorData {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(colors)\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAmBO,IAAMA,mBAAmBC,aAAa;EAC3CC,SAAS;IACPC,MAAM,CAACC,SAASC,QAAQC,MAAlB;IACNC,SAASC;EAFF;AADkC,GAK1C,SALyC;AAOrC,SAASC,WACdC,OAEa;AAAA,MADbC,OACa,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KADNC,uBAAsB;AAE7B,QAAMC,iBAAiBC,SAAS,MAAM;AACpC,UAAMZ,UAAUa,MAAML,KAAD,IAAUA,MAAMM,QAAQN,MAAMR;AACnD,UAAMe,UAAoB,CAAA;AAE1B,QAAIf,YAAY,QAAQA,YAAY,IAAI;AACtCe,cAAQC,KAAM,GAAEP,eAAhB;IACD,WACC,OAAOT,YAAY,YACnBA,YAAY,GACZ;AACA,iBAAWc,SAASV,OAAOJ,OAAD,EAAUiB,MAAM,GAAtB,GAA4B;AAC9CF,gBAAQC,KAAM,WAAUF,OAAxB;MACD;IACF;AAED,WAAOC;EACR,CAhB8B;AAkB/B,SAAO;IAAEJ;EAAF;AACR;;;AC7BM,SAASO,SAAUC,QAA6D;AACrF,SAAOC,iBAAiB,MAAM;AAC5B,UAAMC,UAAoB,CAAA;AAC1B,UAAMC,SAAwB,CAAA;AAE9B,QAAIH,OAAOI,MAAMC,YAAY;AAC3B,UAAIC,WAAWN,OAAOI,MAAMC,UAAd,GAA2B;AACvCF,eAAOI,kBAAkBP,OAAOI,MAAMC;MACvC,OAAM;AACLH,gBAAQM,KAAM,MAAKR,OAAOI,MAAMC,YAAhC;MACD;IACF;AAED,QAAIL,OAAOI,MAAMK,MAAM;AACrB,UAAIH,WAAWN,OAAOI,MAAMK,IAAd,GAAqB;AACjCN,eAAOO,QAAQV,OAAOI,MAAMK;AAC5BN,eAAOQ,aAAaX,OAAOI,MAAMK;MAClC,OAAM;AACLP,gBAAQM,KAAM,QAAOR,OAAOI,MAAMK,MAAlC;MACD;IACF;AAED,WAAO;MAAEG,cAAcV;MAASW,aAAaV;IAAtC;EACR,CAtBsB;AAuBxB;AAIM,SAASW,aACdC,OACAC,MACe;AACf,QAAMhB,SAASiB,SAAS,OAAO;IAC7BR,MAAMS,MAAMH,KAAD,IAAUA,MAAMX,QAASY,OAAOD,MAAMC,QAAQ;EAD5B,EAAR;AAIvB,QAAM;IACJJ,cAAcO;IACdN,aAAaO;EAFT,IAGFrB,SAASC,MAAD;AAEZ,SAAO;IAAEmB;IAAkBC;EAApB;AACR;AAIM,SAASC,mBACdN,OACAC,MACqB;AACrB,QAAMhB,SAASiB,SAAS,OAAO;IAC7BZ,YAAYa,MAAMH,KAAD,IAAUA,MAAMX,QAASY,OAAOD,MAAMC,QAAQ;EADlC,EAAR;AAIvB,QAAM;IACJJ,cAAcU;IACdT,aAAaU;EAFT,IAGFxB,SAASC,MAAD;AAEZ,SAAO;IAAEsB;IAAwBC;EAA1B;AACR;",
  "names": ["makeRoundedProps", "propsFactory", "rounded", "type", "Boolean", "Number", "String", "default", "undefined", "useRounded", "props", "name", "getCurrentInstanceName", "roundedClasses", "computed", "isRef", "value", "classes", "push", "split", "useColor", "colors", "destructComputed", "classes", "styles", "value", "background", "isCssColor", "backgroundColor", "push", "text", "color", "caretColor", "colorClasses", "colorStyles", "useTextColor", "props", "name", "computed", "isRef", "textColorClasses", "textColorStyles", "useBackgroundColor", "backgroundColorClasses", "backgroundColorStyles"]
}
