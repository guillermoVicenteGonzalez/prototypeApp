import {
  useIntersectionObserver
} from "./chunk-4XFS4E34.js";
import {
  VImg
} from "./chunk-K2GT7XQD.js";
import "./chunk-K4JD656G.js";
import "./chunk-3IMRM6AM.js";
import "./chunk-Y6AJBS2M.js";
import {
  defineComponent,
  getScrollParent,
  useRender
} from "./chunk-V72RWUGP.js";
import {
  createVNode,
  onBeforeUnmount,
  ref,
  watch,
  watchEffect
} from "./chunk-BX7HPCYS.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VParallax/VParallax.mjs
import "C:/Users/guillermo/Documents/BISITE/prototypeApp/front/node_modules/vuetify/lib/components/VParallax/VParallax.css";
function floor(val) {
  return Math.floor(Math.abs(val)) * Math.sign(val);
}
var VParallax = defineComponent({
  name: "VParallax",
  props: {
    scale: {
      type: [Number, String],
      default: 1.3
    }
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      intersectionRef,
      isIntersecting
    } = useIntersectionObserver();
    const root = ref();
    watchEffect(() => {
      var _root$value;
      intersectionRef.value = (_root$value = root.value) == null ? void 0 : _root$value.$el;
    });
    let scrollParent;
    watch(isIntersecting, (val) => {
      if (val) {
        scrollParent = getScrollParent(intersectionRef.value);
        scrollParent = scrollParent === document.scrollingElement ? document : scrollParent;
        scrollParent.addEventListener("scroll", onScroll, {
          passive: true
        });
        onScroll();
      } else {
        scrollParent.removeEventListener("scroll", onScroll);
      }
    });
    onBeforeUnmount(() => {
      var _scrollParent;
      (_scrollParent = scrollParent) == null ? void 0 : _scrollParent.removeEventListener("scroll", onScroll);
    });
    let frame = -1;
    function onScroll() {
      if (!isIntersecting.value)
        return;
      cancelAnimationFrame(frame);
      frame = requestAnimationFrame(() => {
        var _a, _b;
        var _root$value2;
        const el = ((_root$value2 = root.value) == null ? void 0 : _root$value2.$el).querySelector(".v-img__img");
        if (!el)
          return;
        const rect = intersectionRef.value.getBoundingClientRect();
        const scrollHeight = (_a = scrollParent.clientHeight) != null ? _a : window.innerHeight;
        const scrollPos = (_b = scrollParent.scrollTop) != null ? _b : window.scrollY;
        const top = rect.top + scrollPos;
        const progress = (scrollPos + scrollHeight - top) / (rect.height + scrollHeight);
        const translate = floor((rect.height * +props.scale - rect.height) * (-progress + 0.5));
        el.style.setProperty("transform", `translateY(${translate}px) scale(${props.scale})`);
      });
    }
    useRender(() => createVNode(VImg, {
      "class": ["v-parallax", {
        "v-parallax--active": isIntersecting.value
      }],
      "ref": root,
      "cover": true,
      "onLoadstart": onScroll,
      "onLoad": onScroll
    }, slots));
    return {};
  }
});
export {
  VParallax
};
//# sourceMappingURL=vuetify_lib_components_VParallax_index__mjs.js.map
