{
  "version": 3,
  "sources": ["../../vuetify/src/composables/display.ts"],
  "sourcesContent": ["// Utilities\nimport { inject, nextTick, reactive, ref, toRefs, watchEffect } from 'vue'\nimport { mergeDeep } from '@/util'\n\n// Globals\nimport { IN_BROWSER, SUPPORTS_TOUCH } from '@/util/globals'\n\n// Types\nimport type { InjectionKey, ToRefs } from 'vue'\n\nexport type DisplayBreakpoint = keyof DisplayThresholds\n\nexport interface DisplayThresholds {\n  xs: number\n  sm: number\n  md: number\n  lg: number\n  xl: number\n  xxl: number\n}\n\nexport interface DisplayOptions {\n  mobileBreakpoint?: number | DisplayBreakpoint\n  thresholds?: Partial<DisplayThresholds>\n}\n\nexport interface InternalDisplayOptions {\n  mobileBreakpoint: number | DisplayBreakpoint\n  thresholds: DisplayThresholds\n}\n\nexport interface DisplayPlatform {\n  android: boolean\n  ios: boolean\n  cordova: boolean\n  electron: boolean\n  chrome: boolean\n  edge: boolean\n  firefox: boolean\n  opera: boolean\n  win: boolean\n  mac: boolean\n  linux: boolean\n  touch: boolean\n  ssr: boolean\n}\n\nexport interface DisplayInstance {\n  xs: boolean\n  sm: boolean\n  md: boolean\n  lg: boolean\n  xl: boolean\n  xxl: boolean\n  smAndUp: boolean\n  mdAndUp: boolean\n  lgAndUp: boolean\n  xlAndUp: boolean\n  smAndDown: boolean\n  mdAndDown: boolean\n  lgAndDown: boolean\n  xlAndDown: boolean\n  name: DisplayBreakpoint\n  height: number\n  width: number\n  mobile: boolean\n  mobileBreakpoint: number | DisplayBreakpoint\n  platform: DisplayPlatform\n  thresholds: DisplayThresholds\n}\n\nexport const DisplaySymbol: InjectionKey<ToRefs<DisplayInstance>> = Symbol.for('vuetify:display')\n\nconst defaultDisplayOptions: DisplayOptions = {\n  mobileBreakpoint: 'lg',\n  thresholds: {\n    xs: 0,\n    sm: 600,\n    md: 960,\n    lg: 1280,\n    xl: 1920,\n    xxl: 2560,\n  },\n}\n\nconst parseDisplayOptions = (options: DisplayOptions = defaultDisplayOptions) => {\n  return mergeDeep(defaultDisplayOptions, options) as InternalDisplayOptions\n}\n\nfunction getClientWidth (isHydrate?: boolean) {\n  return IN_BROWSER && !isHydrate\n    ? window.innerWidth\n    : 0\n}\n\nfunction getClientHeight (isHydrate?: boolean) {\n  return IN_BROWSER && !isHydrate\n    ? window.innerHeight\n    : 0\n}\n\nfunction getPlatform (): DisplayPlatform {\n  const userAgent = IN_BROWSER ? window.navigator.userAgent : 'ssr'\n\n  function match (regexp: RegExp) {\n    return Boolean(userAgent.match(regexp))\n  }\n\n  const android = match(/android/i)\n  const ios = match(/iphone|ipad|ipod/i)\n  const cordova = match(/cordova/i)\n  const electron = match(/electron/i)\n  const chrome = match(/chrome/i)\n  const edge = match(/edge/i)\n  const firefox = match(/firefox/i)\n  const opera = match(/opera/i)\n  const win = match(/win/i)\n  const mac = match(/mac/i)\n  const linux = match(/linux/i)\n  const ssr = match(/ssr/i)\n\n  return {\n    android,\n    ios,\n    cordova,\n    electron,\n    chrome,\n    edge,\n    firefox,\n    opera,\n    win,\n    mac,\n    linux,\n    touch: SUPPORTS_TOUCH,\n    ssr,\n  }\n}\n\nexport function createDisplay (options?: DisplayOptions, isHydrate?: boolean): ToRefs<DisplayInstance> {\n  const { thresholds, mobileBreakpoint } = parseDisplayOptions(options)\n\n  const height = ref(getClientHeight(isHydrate))\n  const platform = getPlatform()\n  const state = reactive({} as DisplayInstance)\n  const width = ref(getClientWidth(isHydrate))\n\n  function onResize () {\n    height.value = getClientHeight()\n    width.value = getClientWidth()\n  }\n\n  if (isHydrate) {\n    nextTick(() => onResize())\n  }\n\n  // eslint-disable-next-line max-statements\n  watchEffect(() => {\n    const xs = width.value < thresholds.sm\n    const sm = width.value < thresholds.md && !xs\n    const md = width.value < thresholds.lg && !(sm || xs)\n    const lg = width.value < thresholds.xl && !(md || sm || xs)\n    const xl = width.value < thresholds.xxl && !(lg || md || sm || xs)\n    const xxl = width.value >= thresholds.xxl\n    const name =\n      xs ? 'xs'\n      : sm ? 'sm'\n      : md ? 'md'\n      : lg ? 'lg'\n      : xl ? 'xl'\n      : 'xxl'\n    const breakpointValue = typeof mobileBreakpoint === 'number' ? mobileBreakpoint : thresholds[mobileBreakpoint]\n    const mobile = !platform.ssr\n      ? width.value < breakpointValue\n      : platform.android || platform.ios || platform.opera\n\n    state.xs = xs\n    state.sm = sm\n    state.md = md\n    state.lg = lg\n    state.xl = xl\n    state.xxl = xxl\n    state.smAndUp = !xs\n    state.mdAndUp = !(xs || sm)\n    state.lgAndUp = !(xs || sm || md)\n    state.xlAndUp = !(xs || sm || md || lg)\n    state.smAndDown = !(md || lg || xl || xxl)\n    state.mdAndDown = !(lg || xl || xxl)\n    state.lgAndDown = !(xl || xxl)\n    state.xlAndDown = !xxl\n    state.name = name\n    state.height = height.value\n    state.width = width.value\n    state.mobile = mobile\n    state.mobileBreakpoint = mobileBreakpoint\n    state.platform = platform\n    state.thresholds = thresholds\n  })\n\n  if (IN_BROWSER) {\n    window.addEventListener('resize', onResize, { passive: true })\n  }\n\n  return toRefs(state)\n}\n\nexport function useDisplay () {\n  const display = inject(DisplaySymbol)\n\n  if (!display) throw new Error('Could not find Vuetify display injection')\n\n  return display\n}\n"],
  "mappings": "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",
  "names": ["DisplaySymbol", "Symbol", "for", "defaultDisplayOptions", "mobileBreakpoint", "thresholds", "xs", "sm", "md", "lg", "xl", "xxl", "parseDisplayOptions", "options", "mergeDeep", "getClientWidth", "isHydrate", "IN_BROWSER", "window", "innerWidth", "getClientHeight", "innerHeight", "getPlatform", "userAgent", "navigator", "match", "regexp", "Boolean", "android", "ios", "cordova", "electron", "chrome", "edge", "firefox", "opera", "win", "mac", "linux", "ssr", "touch", "SUPPORTS_TOUCH", "createDisplay", "height", "ref", "platform", "state", "reactive", "width", "onResize", "value", "nextTick", "watchEffect", "name", "breakpointValue", "mobile", "smAndUp", "mdAndUp", "lgAndUp", "xlAndUp", "smAndDown", "mdAndDown", "lgAndDown", "xlAndDown", "addEventListener", "passive", "toRefs", "useDisplay", "display", "inject", "Error"]
}
