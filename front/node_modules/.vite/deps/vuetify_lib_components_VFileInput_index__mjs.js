import {
  VChip
} from "./chunk-P5VADZBY.js";
import {
  VCounter,
  VField,
  VInput,
  filterFieldProps,
  filterInputProps,
  makeVFieldProps,
  makeVInputProps
} from "./chunk-LHXYG3CF.js";
import "./chunk-IGTRT6LU.js";
import {
  forwardRefs
} from "./chunk-LJBPEXTV.js";
import {
  useLocale
} from "./chunk-FND3FRNN.js";
import "./chunk-3JZBN47X.js";
import "./chunk-QAGD4JHD.js";
import "./chunk-7IMRTJYR.js";
import "./chunk-4XFS4E34.js";
import "./chunk-H7IOOUSU.js";
import "./chunk-7DW4GNSM.js";
import "./chunk-KBCBN6IQ.js";
import "./chunk-WOGKPBG3.js";
import {
  useProxiedModel
} from "./chunk-Z7H4O4HF.js";
import "./chunk-YJ6KMOY3.js";
import "./chunk-2JKRBEA4.js";
import "./chunk-TN3ACNV7.js";
import "./chunk-PFLLVXZV.js";
import "./chunk-XH3XVPWB.js";
import "./chunk-N5KWY5RH.js";
import "./chunk-LF3R5NEA.js";
import "./chunk-KJUB45CG.js";
import "./chunk-K4JD656G.js";
import "./chunk-MUI3WIJK.js";
import "./chunk-3PEZ63GV.js";
import "./chunk-3IMRM6AM.js";
import "./chunk-Y6AJBS2M.js";
import "./chunk-OVA7IPAR.js";
import "./chunk-EVWLYFE4.js";
import {
  callEvent,
  defineComponent,
  filterInputAttrs,
  humanReadableFileSize,
  useRender,
  wrapInArray
} from "./chunk-V72RWUGP.js";
import {
  Fragment,
  computed,
  createVNode,
  mergeProps,
  nextTick,
  ref
} from "./chunk-BX7HPCYS.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VFileInput/VFileInput.mjs
import "C:/Users/Cuenta Bisite00/Documents/BISITE/prototypeApp/prototypeApp/front/node_modules/vuetify/lib/components/VFileInput/VFileInput.css";
var VFileInput = defineComponent({
  name: "VFileInput",
  inheritAttrs: false,
  props: {
    chips: Boolean,
    counter: Boolean,
    counterSizeString: {
      type: String,
      default: "$vuetify.fileInput.counterSize"
    },
    counterString: {
      type: String,
      default: "$vuetify.fileInput.counter"
    },
    multiple: Boolean,
    hint: String,
    persistentHint: Boolean,
    placeholder: String,
    showSize: {
      type: [Boolean, Number],
      default: false,
      validator: (v) => {
        return typeof v === "boolean" || [1e3, 1024].includes(v);
      }
    },
    ...makeVInputProps({
      prependIcon: "$file"
    }),
    modelValue: {
      type: Array,
      default: () => [],
      validator: (val) => {
        return wrapInArray(val).every((v) => v != null && typeof v === "object");
      }
    },
    ...makeVFieldProps({
      clearable: true
    })
  },
  emits: {
    "click:control": (e) => true,
    "update:modelValue": (files) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const {
      t
    } = useLocale();
    const model = useProxiedModel(props, "modelValue");
    const base = computed(() => typeof props.showSize !== "boolean" ? props.showSize : void 0);
    const totalBytes = computed(() => {
      var _a;
      return ((_a = model.value) != null ? _a : []).reduce((bytes, _ref2) => {
        let {
          size = 0
        } = _ref2;
        return bytes + size;
      }, 0);
    });
    const totalBytesReadable = computed(() => humanReadableFileSize(totalBytes.value, base.value));
    const fileNames = computed(() => {
      var _a;
      return ((_a = model.value) != null ? _a : []).map((file) => {
        const {
          name = "",
          size = 0
        } = file;
        return !props.showSize ? name : `${name} (${humanReadableFileSize(size, base.value)})`;
      });
    });
    const counterValue = computed(() => {
      var _a;
      var _model$value;
      const fileCount = (_a = (_model$value = model.value) == null ? void 0 : _model$value.length) != null ? _a : 0;
      if (props.showSize)
        return t(props.counterSizeString, fileCount, totalBytesReadable.value);
      else
        return t(props.counterString, fileCount);
    });
    const vInputRef = ref();
    const vFieldRef = ref();
    const isFocused = ref(false);
    const inputRef = ref();
    const messages = computed(() => {
      return props.messages.length ? props.messages : props.persistentHint ? props.hint : "";
    });
    function onFocus() {
      if (inputRef.value !== document.activeElement) {
        var _inputRef$value;
        (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();
      }
      if (!isFocused.value) {
        isFocused.value = true;
      }
    }
    function onClickPrepend(e) {
      callEvent(props["onClick:prepend"], e);
      onControlClick(e);
    }
    function onControlClick(e) {
      var _inputRef$value2;
      (_inputRef$value2 = inputRef.value) == null ? void 0 : _inputRef$value2.click();
      emit("click:control", e);
    }
    function onClear(e) {
      e.stopPropagation();
      onFocus();
      nextTick(() => {
        model.value = [];
        if (inputRef != null && inputRef.value) {
          inputRef.value.value = "";
        }
        callEvent(props["onClick:clear"], e);
      });
    }
    useRender(() => {
      const hasCounter = !!(slots.counter || props.counter);
      const hasDetails = !!(hasCounter || slots.details);
      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);
      const [{
        modelValue: _,
        ...inputProps
      }] = filterInputProps(props);
      const [fieldProps] = filterFieldProps(props);
      return createVNode(VInput, mergeProps({
        "ref": vInputRef,
        "modelValue": model.value,
        "onUpdate:modelValue": ($event) => model.value = $event,
        "class": "v-file-input",
        "onClick:prepend": onClickPrepend,
        "onClick:append": props["onClick:append"]
      }, rootAttrs, inputProps, {
        "messages": messages.value
      }), {
        ...slots,
        default: (_ref3) => {
          let {
            isDisabled,
            isDirty,
            isReadonly,
            isValid
          } = _ref3;
          return createVNode(VField, mergeProps({
            "ref": vFieldRef,
            "prepend-icon": props.prependIcon,
            "onClick:control": onControlClick,
            "onClick:clear": onClear,
            "onClick:prependInner": props["onClick:prependInner"],
            "onClick:appendInner": props["onClick:appendInner"]
          }, fieldProps, {
            "active": isDirty.value || isFocused.value,
            "dirty": isDirty.value,
            "focused": isFocused.value,
            "error": isValid.value === false
          }), {
            ...slots,
            default: (_ref4) => {
              let {
                props: {
                  class: fieldClass,
                  ...slotProps
                }
              } = _ref4;
              return createVNode(Fragment, null, [createVNode("input", mergeProps({
                "ref": inputRef,
                "type": "file",
                "readonly": isReadonly.value,
                "disabled": isDisabled.value,
                "multiple": props.multiple,
                "name": props.name,
                "onClick": (e) => {
                  e.stopPropagation();
                  onFocus();
                },
                "onChange": (e) => {
                  var _a;
                  if (!e.target)
                    return;
                  const target = e.target;
                  model.value = [...(_a = target.files) != null ? _a : []];
                },
                "onFocus": onFocus,
                "onBlur": () => isFocused.value = false
              }, slotProps, inputAttrs), null), createVNode("div", {
                "class": fieldClass
              }, [model.value.length > 0 && (slots.selection ? slots.selection({
                fileNames: fileNames.value,
                totalBytes: totalBytes.value,
                totalBytesReadable: totalBytesReadable.value
              }) : props.chips ? fileNames.value.map((text) => createVNode(VChip, {
                "key": text,
                "size": "small",
                "color": props.color
              }, {
                default: () => [text]
              })) : fileNames.value.join(", "))])]);
            }
          });
        },
        details: hasDetails ? (slotProps) => {
          var _slots$details;
          return createVNode(Fragment, null, [(_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, slotProps), hasCounter && createVNode(Fragment, null, [createVNode("span", null, null), createVNode(VCounter, {
            "active": !!model.value.length,
            "value": counterValue.value
          }, slots.counter)])]);
        } : void 0
      });
    });
    return forwardRefs({}, vInputRef, vFieldRef, inputRef);
  }
});
export {
  VFileInput
};
//# sourceMappingURL=vuetify_lib_components_VFileInput_index__mjs.js.map
