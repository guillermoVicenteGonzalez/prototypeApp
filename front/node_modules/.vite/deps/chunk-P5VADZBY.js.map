{
  "version": 3,
  "sources": ["../../vuetify/src/components/VChip/VChip.tsx", "../../vuetify/src/components/VChipGroup/VChipGroup.tsx"],
  "sourcesContent": ["/* eslint-disable complexity */\n// Styles\nimport './VChip.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VChipGroupSymbol } from '@/components/VChipGroup/VChipGroup'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { defineComponent } from '@/util'\n\nexport const VChip = defineComponent({\n  name: 'VChip',\n\n  directives: { Ripple },\n\n  props: {\n    activeClass: String,\n    appendAvatar: String,\n    appendIcon: IconValue,\n    closable: Boolean,\n    closeIcon: {\n      type: IconValue,\n      default: '$delete',\n    },\n    closeLabel: {\n      type: String,\n      default: '$vuetify.close',\n    },\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      default: '$complete',\n    },\n    label: Boolean,\n    link: Boolean,\n    pill: Boolean,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n    text: String,\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'span' }),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'tonal' } as const),\n  },\n\n  emits: {\n    'click:close': (e: Event) => true,\n    'update:active': (value: boolean) => true,\n    'update:modelValue': (value: boolean) => true,\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses } = useSize(props)\n    const { themeClasses } = provideTheme(props)\n\n    const isActive = useProxiedModel(props, 'modelValue')\n    const group = useGroupItem(props, VChipGroupSymbol, false)\n    const link = useLink(props, attrs)\n\n    function onCloseClick (e: Event) {\n      isActive.value = false\n\n      emit('click:close', e)\n    }\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasAppend = !!(slots.append || props.appendIcon || props.appendAvatar)\n      const hasClose = !!(slots.close || props.closable)\n      const hasFilter = !!(slots.filter || props.filter) && group\n      const hasPrepend = !!(slots.prepend || props.prependIcon || props.prependAvatar)\n      const hasColor = !group || group.isSelected.value\n      const isClickable = !props.disabled && (!!group || link.isClickable.value || props.link)\n      const onClickFunc = props.link ? props.link : group?.toggle\n\n      return isActive.value && (\n        <Tag\n          class={[\n            'v-chip',\n            {\n              'v-chip--disabled': props.disabled,\n              'v-chip--label': props.label,\n              'v-chip--link': isClickable,\n              'v-chip--filter': hasFilter,\n              'v-chip--pill': props.pill,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            hasColor ? colorClasses.value : undefined,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            sizeClasses.value,\n            variantClasses.value,\n            group?.selectedClass.value,\n          ]}\n          style={[\n            hasColor ? colorStyles.value : undefined,\n          ]}\n          disabled={ props.disabled || undefined }\n          draggable={ props.draggable }\n          href={ link.href.value }\n          v-ripple={ [isClickable && props.ripple, null] }\n          onClick={ isClickable && onClickFunc }\n        >\n          { genOverlays(isClickable, 'v-chip') }\n\n          { hasFilter && (\n            <VDefaultsProvider\n              key=\"filter\"\n              defaults={{\n                VIcon: { icon: props.filterIcon },\n              }}\n            >\n              <VExpandXTransition>\n                <div\n                  class=\"v-chip__filter\"\n                  v-show={ group.isSelected.value }\n                >\n                  { slots.filter ? slots.filter() : (<VIcon />) }\n                </div>\n              </VExpandXTransition>\n            </VDefaultsProvider>\n          ) }\n\n          { hasPrepend && (\n            <VDefaultsProvider\n              key=\"prepend\"\n              defaults={{\n                VAvatar: {\n                  image: props.prependAvatar,\n                },\n                VIcon: {\n                  icon: props.prependIcon,\n                },\n              }}\n            >\n              { slots.prepend\n                ? (\n                  <div class=\"v-chip__prepend\">\n                    { slots.prepend() }\n                  </div>\n                )\n                : props.prependAvatar ? (<VAvatar start />)\n                : props.prependIcon ? (<VIcon start />)\n                : undefined\n              }\n            </VDefaultsProvider>\n          ) }\n\n          { slots.default?.({\n            isSelected: group?.isSelected.value,\n            selectedClass: group?.selectedClass.value,\n            select: group?.select,\n            toggle: group?.toggle,\n            value: group?.value.value,\n            disabled: props.disabled,\n          }) ?? props.text }\n\n          { hasAppend && (\n            <VDefaultsProvider\n              key=\"append\"\n              defaults={{\n                VAvatar: {\n                  image: props.appendAvatar,\n                },\n                VIcon: {\n                  icon: props.appendIcon,\n                },\n              }}\n            >\n              { slots.append\n                ? (\n                  <div class=\"v-chip__append\">\n                    { slots.append() }\n                  </div>\n                )\n                : props.appendAvatar ? (<VAvatar end />)\n                : props.appendIcon ? (<VIcon end />)\n                : undefined\n              }\n            </VDefaultsProvider>\n          ) }\n\n          { hasClose && (\n            <VDefaultsProvider\n              key=\"close\"\n              defaults={{\n                VIcon: {\n                  icon: props.closeIcon,\n                  size: 'x-small',\n                },\n              }}\n            >\n              <div\n                class=\"v-chip__close\"\n                onClick={ onCloseClick }\n              >\n                { slots.close ? slots.close() : (<VIcon />) }\n              </div>\n            </VDefaultsProvider>\n          ) }\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VChip = InstanceType<typeof VChip>\n", "// Styles\nimport './VChipGroup.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { deepEqual, defineComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const VChipGroup = defineComponent({\n  name: 'VChipGroup',\n\n  props: {\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function as PropType<typeof deepEqual>,\n      default: deepEqual,\n    },\n\n    ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'tonal' } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-chip-group',\n          {\n            'v-chip-group--column': props.column,\n          },\n          themeClasses.value,\n        ]}\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        }) }\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"],
  "mappings": "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",
  "names": ["VChipGroupSymbol", "Symbol", "for", "VChipGroup", "defineComponent", "name", "props", "column", "Boolean", "filter", "valueComparator", "type", "Function", "default", "deepEqual", "makeGroupProps", "selectedClass", "makeTagProps", "makeThemeProps", "makeVariantProps", "variant", "emits", "value", "setup", "slots", "themeClasses", "provideTheme", "isSelected", "select", "next", "prev", "selected", "useGroup", "provideDefaults", "VChip", "color", "toRef", "useRender", "VChip", "defineComponent", "name", "directives", "Ripple", "props", "activeClass", "String", "appendAvatar", "appendIcon", "IconValue", "closable", "Boolean", "closeIcon", "type", "default", "closeLabel", "draggable", "filter", "filterIcon", "label", "link", "pill", "prependAvatar", "prependIcon", "ripple", "text", "modelValue", "makeBorderProps", "makeDensityProps", "makeElevationProps", "makeGroupItemProps", "makeRoundedProps", "makeRouterProps", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "makeVariantProps", "variant", "emits", "e", "value", "val", "setup", "attrs", "emit", "slots", "borderClasses", "useBorder", "colorClasses", "colorStyles", "variantClasses", "useVariant", "densityClasses", "useDensity", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "sizeClasses", "useSize", "themeClasses", "provideTheme", "isActive", "useProxiedModel", "group", "useGroupItem", "VChipGroupSymbol", "useLink", "onCloseClick", "Tag", "isLink", "hasAppend", "append", "hasClose", "close", "hasFilter", "hasPrepend", "prepend", "hasColor", "isSelected", "isClickable", "disabled", "onClickFunc", "toggle", "undefined", "selectedClass", "href", "genOverlays", "VIcon", "icon", "VAvatar", "image", "select", "size"]
}
