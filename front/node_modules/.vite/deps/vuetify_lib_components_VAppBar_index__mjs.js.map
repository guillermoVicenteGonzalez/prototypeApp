{
  "version": 3,
  "sources": ["../../vuetify/src/components/VAppBar/VAppBar.tsx", "../../vuetify/src/components/VToolbar/VToolbar.tsx", "../../vuetify/src/components/VToolbar/VToolbarTitle.tsx", "../../vuetify/src/components/VAppBar/VAppBarNavIcon.tsx", "../../vuetify/src/components/VToolbar/VToolbarItems.tsx", "../../vuetify/src/components/VAppBar/VAppBarTitle.tsx"],
  "sourcesContent": ["// Styles\nimport './VAppBar.sass'\n\n// Components\nimport { filterToolbarProps, makeVToolbarProps, VToolbar } from '@/components/VToolbar/VToolbar'\n\n// Composables\nimport { makeLayoutItemProps, useLayoutItem } from '@/composables/layout'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref, toRef } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VAppBar = defineComponent({\n  name: 'VAppBar',\n\n  props: {\n    // TODO: Implement scrolling techniques\n    // hideOnScroll: Boolean\n    // invertedScroll: Boolean\n    // collapseOnScroll: Boolean\n    // elevateOnScroll: Boolean\n    // shrinkOnScroll: Boolean\n    // fadeImageOnScroll: Boolean\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n    location: {\n      type: String as PropType<'top' | 'bottom'>,\n      default: 'top',\n      validator: (value: any) => ['top', 'bottom'].includes(value),\n    },\n\n    ...makeVToolbarProps(),\n    ...makeLayoutItemProps(),\n\n    height: {\n      type: [Number, String],\n      default: 64,\n    },\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const vToolbarRef = ref()\n    const isActive = useProxiedModel(props, 'modelValue')\n    const height = computed(() => {\n      const height: number = vToolbarRef.value?.contentHeight ?? 0\n      const extensionHeight: number = vToolbarRef.value?.extensionHeight ?? 0\n\n      return (height + extensionHeight)\n    })\n    const { layoutItemStyles } = useLayoutItem({\n      id: props.name,\n      order: computed(() => parseInt(props.order, 10)),\n      position: toRef(props, 'location'),\n      layoutSize: height,\n      elementSize: height,\n      active: isActive,\n      absolute: toRef(props, 'absolute'),\n    })\n\n    useRender(() => {\n      const [toolbarProps] = filterToolbarProps(props)\n\n      return (\n        <VToolbar\n          ref={ vToolbarRef }\n          class={[\n            'v-app-bar',\n            {\n              'v-app-bar--bottom': props.location === 'bottom',\n            },\n          ]}\n          style={{\n            ...layoutItemStyles.value,\n            height: undefined,\n          }}\n          { ...toolbarProps }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VAppBar = InstanceType<typeof VAppBar>\n", "// Styles\nimport './VToolbar.sass'\n\n// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandTransition } from '@/components/transitions'\nimport { VImg } from '@/components/VImg'\nimport { VToolbarTitle } from './VToolbarTitle'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, ref, toRef } from 'vue'\nimport { convertToUnit, genericComponent, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nexport type Density = typeof allowedDensities[number]\n\nconst allowedDensities = [null, 'prominent', 'default', 'comfortable', 'compact'] as const\n\nexport const makeVToolbarProps = propsFactory({\n  absolute: Boolean,\n  collapse: Boolean,\n  color: String,\n  density: {\n    type: String as PropType<Density>,\n    default: 'default',\n    validator: (v: any) => allowedDensities.includes(v),\n  },\n  extended: Boolean,\n  extensionHeight: {\n    type: [Number, String],\n    default: 48,\n  },\n  flat: Boolean,\n  floating: Boolean,\n  height: {\n    type: [Number, String],\n    default: 64,\n  },\n  image: String,\n  title: String,\n\n  ...makeBorderProps(),\n  ...makeElevationProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps({ tag: 'header' }),\n  ...makeThemeProps(),\n}, 'v-toolbar')\n\nexport const VToolbar = genericComponent<new () => {\n  $slots: MakeSlots<{\n    default: []\n    image: []\n    prepend: []\n    append: []\n    title: []\n    extension: []\n  }>\n}>()({\n  name: 'VToolbar',\n\n  props: makeVToolbarProps(),\n\n  setup (props, { slots }) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { borderClasses } = useBorder(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { themeClasses } = provideTheme(props)\n\n    const isExtended = ref(!!(props.extended || slots.extension?.()))\n    const contentHeight = computed(() => parseInt((\n      Number(props.height) +\n      (props.density === 'prominent' ? Number(props.height) : 0) -\n      (props.density === 'comfortable' ? 8 : 0) -\n      (props.density === 'compact' ? 16 : 0)\n    ), 10))\n    const extensionHeight = computed(() => isExtended.value\n      ? parseInt((\n        Number(props.extensionHeight) +\n        (props.density === 'prominent' ? Number(props.extensionHeight) : 0) -\n        (props.density === 'comfortable' ? 4 : 0) -\n        (props.density === 'compact' ? 8 : 0)\n      ), 10)\n      : 0\n    )\n\n    provideDefaults({\n      VBtn: {\n        variant: 'text',\n      },\n    })\n\n    useRender(() => {\n      const hasTitle = !!(props.title || slots.title)\n      const hasImage = !!(slots.image || props.image)\n\n      const extension = slots.extension?.()\n      isExtended.value = !!(props.extended || extension)\n\n      return (\n        <props.tag\n          class={[\n            'v-toolbar',\n            {\n              'v-toolbar--absolute': props.absolute,\n              'v-toolbar--collapse': props.collapse,\n              'v-toolbar--flat': props.flat,\n              'v-toolbar--floating': props.floating,\n              [`v-toolbar--density-${props.density}`]: true,\n            },\n            backgroundColorClasses.value,\n            borderClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            themeClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n          ]}\n        >\n          { hasImage && (\n            <div key=\"image\" class=\"v-toolbar__image\">\n              <VDefaultsProvider\n                defaults={{\n                  VImg: {\n                    cover: true,\n                    src: props.image,\n                  },\n                }}\n              >\n                { slots.image ? slots.image?.() : (<VImg />) }\n              </VDefaultsProvider>\n            </div>\n          ) }\n\n          <div\n            class=\"v-toolbar__content\"\n            style={{ height: convertToUnit(contentHeight.value) }}\n          >\n            { slots.prepend && (\n              <div class=\"v-toolbar__prepend\">\n                { slots.prepend?.() }\n              </div>\n            ) }\n\n            { hasTitle && (\n              <VToolbarTitle key=\"title\" text={ props.title }>\n                {{ text: slots.title }}\n              </VToolbarTitle>\n            ) }\n\n            { slots.default?.() }\n\n            { slots.append && (\n              <div class=\"v-toolbar__append\">\n                { slots.append?.() }\n              </div>\n            ) }\n          </div>\n\n          <VExpandTransition>\n            { isExtended.value && (\n              <div\n                class=\"v-toolbar__extension\"\n                style={{ height: convertToUnit(extensionHeight.value) }}\n              >\n                { extension }\n              </div>\n            ) }\n          </VExpandTransition>\n        </props.tag>\n      )\n    })\n\n    return {\n      contentHeight,\n      extensionHeight,\n    }\n  },\n})\n\nexport type VToolbar = InstanceType<typeof VToolbar>\n\nexport function filterToolbarProps (props: ExtractPropTypes<ReturnType<typeof makeVToolbarProps>>) {\n  return pick(props, Object.keys(VToolbar?.props ?? {}) as any)\n}\n", "// Composables\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { MakeSlots } from '@/util'\n\nexport const VToolbarTitle = genericComponent<new () => {\n  $slots: MakeSlots<{\n    default: []\n    text: []\n  }>\n}>()({\n  name: 'VToolbarTitle',\n\n  props: {\n    text: String,\n\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    useRender(() => {\n      const hasText = !!(slots.default || slots.text || props.text)\n\n      return (\n        <props.tag class=\"v-toolbar-title\">\n          { hasText && (\n            <div class=\"v-toolbar-title__placeholder\">\n              { slots.text ? slots.text() : props.text }\n\n              { slots.default?.() }\n            </div>\n          ) }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VToolbarTitle = InstanceType<typeof VToolbarTitle>\n", "// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\n\nexport const VAppBarNavIcon = defineComponent({\n  name: 'VAppBarNavIcon',\n\n  props: {\n    icon: {\n      type: IconValue,\n      default: '$menu',\n    },\n  },\n\n  setup (props, { slots }) {\n    useRender(() => (\n      <VBtn\n        class=\"v-app-bar-nav-icon\"\n        icon={ props.icon }\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n", "// Composables\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\nexport const VToolbarItems = defineComponent({\n  name: 'VToolbarItems',\n\n  props: makeVariantProps({ variant: 'text' }),\n\n  setup (props, { slots }) {\n    provideDefaults({\n      VBtn: {\n        color: toRef(props, 'color'),\n        height: 'inherit',\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => (\n      <div class=\"v-toolbar-items\">\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VToolbarItems = InstanceType<typeof VToolbarItems>\n", "// Composables\nimport { VToolbarTitle } from '@/components/VToolbar'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\n\nexport const VAppBarTitle = defineComponent({\n  name: 'VAppBarTitle',\n\n  props: { ...VToolbarTitle.props },\n\n  setup (_, { slots }) {\n    useRender(() => (\n      <VToolbarTitle\n        class=\"v-app-bar-title\"\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n"],
  "mappings": "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",
  "names": ["VToolbarTitle", "genericComponent", "name", "props", "text", "String", "makeTagProps", "setup", "slots", "useRender", "hasText", "default", "allowedDensities", "makeVToolbarProps", "propsFactory", "absolute", "Boolean", "collapse", "color", "String", "density", "type", "default", "validator", "v", "includes", "extended", "extensionHeight", "Number", "flat", "floating", "height", "image", "title", "makeBorderProps", "makeElevationProps", "makeRoundedProps", "makeTagProps", "tag", "makeThemeProps", "VToolbar", "genericComponent", "name", "props", "setup", "slots", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "toRef", "borderClasses", "useBorder", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "themeClasses", "provideTheme", "isExtended", "ref", "extension", "contentHeight", "computed", "parseInt", "value", "provideDefaults", "VBtn", "variant", "useRender", "hasTitle", "hasImage", "VImg", "cover", "src", "convertToUnit", "prepend", "text", "append", "filterToolbarProps", "pick", "Object", "keys", "VAppBar", "defineComponent", "name", "props", "modelValue", "type", "Boolean", "default", "location", "String", "validator", "value", "includes", "makeVToolbarProps", "makeLayoutItemProps", "height", "Number", "emits", "setup", "slots", "vToolbarRef", "ref", "isActive", "useProxiedModel", "computed", "contentHeight", "extensionHeight", "layoutItemStyles", "useLayoutItem", "id", "order", "parseInt", "position", "toRef", "layoutSize", "elementSize", "active", "absolute", "useRender", "toolbarProps", "filterToolbarProps", "undefined", "VAppBarNavIcon", "defineComponent", "name", "props", "icon", "type", "IconValue", "default", "setup", "slots", "useRender", "VToolbarItems", "defineComponent", "name", "props", "makeVariantProps", "variant", "setup", "slots", "provideDefaults", "VBtn", "color", "toRef", "height", "useRender", "default", "VAppBarTitle", "defineComponent", "name", "props", "VToolbarTitle", "setup", "_", "slots", "useRender"]
}
