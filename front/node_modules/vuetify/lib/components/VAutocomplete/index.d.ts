import * as vue from 'vue';
import { VNodeChild, JSXComponent, PropType, ComputedRef, Ref, nextTick } from 'vue';

declare type SlotsToProps<T extends Record<string, Slot>> = {
    $children: () => (T['default'] | VNodeChild | {
        [K in keyof T]?: T[K];
    });
    'v-slots': new () => {
        [K in keyof T]?: T[K] | false;
    };
};
declare type Slot<T extends any[] = any[]> = (...args: T) => VNodeChild;
declare type MakeSlots<T extends Record<string, any[]>> = {
    [K in keyof T]?: Slot<T[K]>;
};

declare type SelectItemKey = boolean | string | (string | number)[] | ((item: Record<string, any>, fallback?: any) => any);

interface InternalItem {
    title: string;
    value: any;
    props: {
        [key: string]: any;
        title: string;
        value: any;
    };
    children?: InternalItem[];
    raw: any;
}

interface LoaderSlotProps {
    color: string | undefined;
    isActive: boolean;
}

declare type IconValue = string | JSXComponent;
declare const IconValue: PropType<IconValue>;

interface VInputSlot {
    id: ComputedRef<string>;
    isDirty: ComputedRef<boolean>;
    isDisabled: ComputedRef<boolean>;
    isReadonly: ComputedRef<boolean>;
    isPristine: Ref<boolean>;
    isValid: ComputedRef<boolean | null>;
    isValidating: Ref<boolean>;
    reset: () => void;
    resetValidation: () => void;
    validate: () => void;
}

interface DefaultInputSlot {
    isActive: Ref<boolean>;
    isFocused: Ref<boolean>;
    controlRef: Ref<HTMLElement | undefined>;
    focus: () => void;
    blur: () => void;
}
interface VFieldSlot extends DefaultInputSlot {
    props: Record<string, unknown>;
}

/**
 * - match without highlight
 * - single match (index), length already known
 * - single match (start, end)
 * - multiple matches (start, end), probably shouldn't overlap
 */
declare type FilterMatch = boolean | number | [number, number] | [number, number][];
declare type FilterFunction = (value: string, query: string, item?: any) => FilterMatch;
declare type FilterKeyFunctions = Record<string, FilterFunction>;
declare type FilterKeys = string | string[];
declare type FilterMode = 'some' | 'every' | 'union' | 'intersection';

declare type Primitive = string | number | boolean | symbol;
declare type Val<T, ReturnObject extends boolean> = T extends Primitive ? T : (ReturnObject extends true ? T : any);
declare type Value<T, ReturnObject extends boolean, Multiple extends boolean> = Multiple extends true ? Val<T, ReturnObject>[] : Val<T, ReturnObject>;
declare const VAutocomplete: {
    new (...args: any[]): {
        $: vue.ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            transition: string | boolean | (vue.TransitionProps & {
                component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
            });
            menu: boolean;
            eager: boolean;
            readonly: boolean;
            noDataText: string;
            itemTitle: SelectItemKey;
            itemValue: SelectItemKey;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            chips: boolean;
            closableChips: boolean;
            hideNoData: boolean;
            hideSelected: boolean;
            menuIcon: IconValue;
            openOnClear: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            filterKeys: (string & {}) | FilterKeys;
        }> & Omit<Readonly<vue.ExtractPropTypes<Omit<{
            transition: Omit<{
                type: vue.PropType<string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                })>;
                default: string;
                validator: (val: unknown) => boolean;
            }, "type" | "default"> & {
                type: vue.PropType<string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                })>;
                default: string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                });
            };
            items: {
                type: vue.PropType<any[]>;
                default: () => never[];
            };
            itemTitle: {
                type: vue.PropType<SelectItemKey>;
                default: string;
            };
            itemValue: {
                type: vue.PropType<SelectItemKey>;
                default: string;
            };
            itemChildren: Omit<{
                type: vue.PropType<SelectItemKey>;
                default: string;
            }, "type" | "default"> & {
                type: vue.PropType<SelectItemKey>;
                default: SelectItemKey;
            };
            itemProps: {
                type: vue.PropType<SelectItemKey>;
                default: string;
            };
            returnObject: BooleanConstructor;
            chips: BooleanConstructor;
            closableChips: BooleanConstructor;
            eager: BooleanConstructor;
            hideNoData: BooleanConstructor;
            hideSelected: BooleanConstructor;
            menu: BooleanConstructor;
            menuIcon: {
                type: vue.PropType<IconValue>;
                default: string;
            };
            menuProps: {
                type: vue.PropType<Partial<{
                    transition: string | boolean | (vue.TransitionProps & {
                        component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                    }) | {
                        readonly component: vue.DefineComponent<{
                            target: vue.PropType<HTMLElement>;
                        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                            target: vue.PropType<HTMLElement>;
                        }>>, {}>;
                    };
                    modelValue: boolean;
                }> & Omit<Readonly<vue.ExtractPropTypes<{
                    transition: Omit<{
                        type: vue.PropType<string | boolean | (vue.TransitionProps & {
                            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                        })>;
                        default: string;
                        validator: (val: unknown) => boolean;
                    }, "type" | "default"> & {
                        type: vue.PropType<string | boolean | (vue.TransitionProps & {
                            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                        }) | {
                            readonly component: vue.DefineComponent<{
                                target: vue.PropType<HTMLElement>;
                            }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                                target: vue.PropType<HTMLElement>;
                            }>>, {}>;
                        }>;
                        default: string | boolean | (vue.TransitionProps & {
                            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                        }) | {
                            readonly component: vue.DefineComponent<{
                                target: vue.PropType<HTMLElement>;
                            }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                                target: vue.PropType<HTMLElement>;
                            }>>, {}>;
                        };
                    };
                    modelValue: BooleanConstructor;
                    id: StringConstructor;
                } & SlotsToProps<MakeSlots<{
                    default: [{
                        isActive: vue.Ref<boolean>;
                    }];
                    activator: [{
                        isActive: boolean;
                        props: Record<string, any>;
                    }];
                }>>>> & {
                    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "transition" | "modelValue">>;
            };
            modelValue: {
                type: null;
                default: () => never[];
            };
            multiple: BooleanConstructor;
            noDataText: {
                type: StringConstructor;
                default: string;
            };
            openOnClear: BooleanConstructor;
            readonly: BooleanConstructor;
            customFilter: vue.PropType<FilterFunction>;
            customKeyFilter: vue.PropType<FilterKeyFunctions>;
            filterKeys: {
                type: vue.PropType<(string & {}) | FilterKeys>;
                default: (string & {}) | FilterKeys;
            };
            filterMode: {
                type: vue.PropType<FilterMode>;
                default: string;
            };
            noFilter: BooleanConstructor;
            search: StringConstructor;
        }, "multiple" | "items" | "onUpdate:modelValue" | "modelValue" | "returnObject"> & SlotsToProps<Omit<MakeSlots<{
            default: [VInputSlot];
            prepend: [VInputSlot];
            append: [VInputSlot];
            details: [VInputSlot];
        }> & MakeSlots<{
            clear: [];
            'prepend-inner': [DefaultInputSlot & VInputSlot];
            'append-inner': [DefaultInputSlot & VInputSlot];
            label: [DefaultInputSlot & VInputSlot];
            loader: [LoaderSlotProps];
            default: [VFieldSlot];
        }>, "default"> & MakeSlots<{
            item: [{
                item: unknown;
                index: number;
                props: Record<string, unknown>;
            }];
            chip: [{
                item: unknown;
                index: number;
                props: Record<string, unknown>;
            }];
            selection: [{
                item: unknown;
                index: number;
            }];
            'no-data': [];
        }>>>> & {
            "onUpdate:menu"?: ((val: boolean) => any) | undefined;
            "onUpdate:search"?: ((val: any) => any) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "transition" | "menu" | "eager" | "readonly" | "noDataText" | "itemTitle" | "itemValue" | "itemChildren" | "itemProps" | "chips" | "closableChips" | "hideNoData" | "hideSelected" | "menuIcon" | "openOnClear" | "filterMode" | "noFilter" | "filterKeys">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: vue.Slot | undefined;
        }>;
        $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:menu", val: boolean) => void) & ((event: "update:search", val: any) => void);
        $el: any;
        $options: vue.ComponentOptionsBase<Readonly<vue.ExtractPropTypes<Omit<{
            transition: Omit<{
                type: vue.PropType<string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                })>;
                default: string;
                validator: (val: unknown) => boolean;
            }, "type" | "default"> & {
                type: vue.PropType<string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                })>;
                default: string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                });
            };
            items: {
                type: vue.PropType<any[]>;
                default: () => never[];
            };
            itemTitle: {
                type: vue.PropType<SelectItemKey>;
                default: string;
            };
            itemValue: {
                type: vue.PropType<SelectItemKey>;
                default: string;
            };
            itemChildren: Omit<{
                type: vue.PropType<SelectItemKey>;
                default: string;
            }, "type" | "default"> & {
                type: vue.PropType<SelectItemKey>;
                default: SelectItemKey;
            };
            itemProps: {
                type: vue.PropType<SelectItemKey>;
                default: string;
            };
            returnObject: BooleanConstructor;
            chips: BooleanConstructor;
            closableChips: BooleanConstructor;
            eager: BooleanConstructor;
            hideNoData: BooleanConstructor;
            hideSelected: BooleanConstructor;
            menu: BooleanConstructor;
            menuIcon: {
                type: vue.PropType<IconValue>;
                default: string;
            };
            menuProps: {
                type: vue.PropType<Partial<{
                    transition: string | boolean | (vue.TransitionProps & {
                        component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                    }) | {
                        readonly component: vue.DefineComponent<{
                            target: vue.PropType<HTMLElement>;
                        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                            target: vue.PropType<HTMLElement>;
                        }>>, {}>;
                    };
                    modelValue: boolean;
                }> & Omit<Readonly<vue.ExtractPropTypes<{
                    transition: Omit<{
                        type: vue.PropType<string | boolean | (vue.TransitionProps & {
                            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                        })>;
                        default: string;
                        validator: (val: unknown) => boolean;
                    }, "type" | "default"> & {
                        type: vue.PropType<string | boolean | (vue.TransitionProps & {
                            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                        }) | {
                            readonly component: vue.DefineComponent<{
                                target: vue.PropType<HTMLElement>;
                            }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                                target: vue.PropType<HTMLElement>;
                            }>>, {}>;
                        }>;
                        default: string | boolean | (vue.TransitionProps & {
                            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                        }) | {
                            readonly component: vue.DefineComponent<{
                                target: vue.PropType<HTMLElement>;
                            }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                                target: vue.PropType<HTMLElement>;
                            }>>, {}>;
                        };
                    };
                    modelValue: BooleanConstructor;
                    id: StringConstructor;
                } & SlotsToProps<MakeSlots<{
                    default: [{
                        isActive: vue.Ref<boolean>;
                    }];
                    activator: [{
                        isActive: boolean;
                        props: Record<string, any>;
                    }];
                }>>>> & {
                    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "transition" | "modelValue">>;
            };
            modelValue: {
                type: null;
                default: () => never[];
            };
            multiple: BooleanConstructor;
            noDataText: {
                type: StringConstructor;
                default: string;
            };
            openOnClear: BooleanConstructor;
            readonly: BooleanConstructor;
            customFilter: vue.PropType<FilterFunction>;
            customKeyFilter: vue.PropType<FilterKeyFunctions>;
            filterKeys: {
                type: vue.PropType<(string & {}) | FilterKeys>;
                default: (string & {}) | FilterKeys;
            };
            filterMode: {
                type: vue.PropType<FilterMode>;
                default: string;
            };
            noFilter: BooleanConstructor;
            search: StringConstructor;
        }, "multiple" | "items" | "onUpdate:modelValue" | "modelValue" | "returnObject"> & SlotsToProps<Omit<MakeSlots<{
            default: [VInputSlot];
            prepend: [VInputSlot];
            append: [VInputSlot];
            details: [VInputSlot];
        }> & MakeSlots<{
            clear: [];
            'prepend-inner': [DefaultInputSlot & VInputSlot];
            'append-inner': [DefaultInputSlot & VInputSlot];
            label: [DefaultInputSlot & VInputSlot];
            loader: [LoaderSlotProps];
            default: [VFieldSlot];
        }>, "default"> & MakeSlots<{
            item: [{
                item: unknown;
                index: number;
                props: Record<string, unknown>;
            }];
            chip: [{
                item: unknown;
                index: number;
                props: Record<string, unknown>;
            }];
            selection: [{
                item: unknown;
                index: number;
            }];
            'no-data': [];
        }>>>> & {
            "onUpdate:menu"?: ((val: boolean) => any) | undefined;
            "onUpdate:search"?: ((val: any) => any) | undefined;
        }, {
            isFocused: vue.Ref<boolean>;
            isPristine: vue.Ref<boolean>;
            menu: vue.Ref<boolean> & {
                readonly externalValue: boolean;
            };
            search: vue.Ref<string | undefined> & {
                readonly externalValue: string | undefined;
            };
            filteredItems: vue.ComputedRef<{
                item: InternalItem;
                matches: Record<string, FilterMatch>;
            }[]>;
            select: (item: any) => void;
        } & {
            [x: string]: any;
            [x: number]: any;
            [x: symbol]: any;
        }, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Omit<{
            'update:search': (val: any) => boolean;
            'update:modelValue': (val: any) => boolean;
            'update:menu': (val: boolean) => boolean;
        }, "multiple" | "items" | "update:modelValue" | "modelValue" | "returnObject">, string, {
            transition: string | boolean | (vue.TransitionProps & {
                component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
            });
            menu: boolean;
            eager: boolean;
            readonly: boolean;
            noDataText: string;
            itemTitle: SelectItemKey;
            itemValue: SelectItemKey;
            itemChildren: SelectItemKey;
            itemProps: SelectItemKey;
            chips: boolean;
            closableChips: boolean;
            hideNoData: boolean;
            hideSelected: boolean;
            menuIcon: IconValue;
            openOnClear: boolean;
            filterMode: FilterMode;
            noFilter: boolean;
            filterKeys: (string & {}) | FilterKeys;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: vue.WatchOptions<boolean> | undefined): vue.WatchStopHandle;
    } & Readonly<vue.ExtractPropTypes<Omit<{
        transition: Omit<{
            type: vue.PropType<string | boolean | (vue.TransitionProps & {
                component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
            })>;
            default: string;
            validator: (val: unknown) => boolean;
        }, "type" | "default"> & {
            type: vue.PropType<string | boolean | (vue.TransitionProps & {
                component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
            })>;
            default: string | boolean | (vue.TransitionProps & {
                component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
            });
        };
        items: {
            type: vue.PropType<any[]>;
            default: () => never[];
        };
        itemTitle: {
            type: vue.PropType<SelectItemKey>;
            default: string;
        };
        itemValue: {
            type: vue.PropType<SelectItemKey>;
            default: string;
        };
        itemChildren: Omit<{
            type: vue.PropType<SelectItemKey>;
            default: string;
        }, "type" | "default"> & {
            type: vue.PropType<SelectItemKey>;
            default: SelectItemKey;
        };
        itemProps: {
            type: vue.PropType<SelectItemKey>;
            default: string;
        };
        returnObject: BooleanConstructor;
        chips: BooleanConstructor;
        closableChips: BooleanConstructor;
        eager: BooleanConstructor;
        hideNoData: BooleanConstructor;
        hideSelected: BooleanConstructor;
        menu: BooleanConstructor;
        menuIcon: {
            type: vue.PropType<IconValue>;
            default: string;
        };
        menuProps: {
            type: vue.PropType<Partial<{
                transition: string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                }) | {
                    readonly component: vue.DefineComponent<{
                        target: vue.PropType<HTMLElement>;
                    }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                        target: vue.PropType<HTMLElement>;
                    }>>, {}>;
                };
                modelValue: boolean;
            }> & Omit<Readonly<vue.ExtractPropTypes<{
                transition: Omit<{
                    type: vue.PropType<string | boolean | (vue.TransitionProps & {
                        component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                    })>;
                    default: string;
                    validator: (val: unknown) => boolean;
                }, "type" | "default"> & {
                    type: vue.PropType<string | boolean | (vue.TransitionProps & {
                        component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                    }) | {
                        readonly component: vue.DefineComponent<{
                            target: vue.PropType<HTMLElement>;
                        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                            target: vue.PropType<HTMLElement>;
                        }>>, {}>;
                    }>;
                    default: string | boolean | (vue.TransitionProps & {
                        component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                    }) | {
                        readonly component: vue.DefineComponent<{
                            target: vue.PropType<HTMLElement>;
                        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                            target: vue.PropType<HTMLElement>;
                        }>>, {}>;
                    };
                };
                modelValue: BooleanConstructor;
                id: StringConstructor;
            } & SlotsToProps<MakeSlots<{
                default: [{
                    isActive: vue.Ref<boolean>;
                }];
                activator: [{
                    isActive: boolean;
                    props: Record<string, any>;
                }];
            }>>>> & {
                "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "transition" | "modelValue">>;
        };
        modelValue: {
            type: null;
            default: () => never[];
        };
        multiple: BooleanConstructor;
        noDataText: {
            type: StringConstructor;
            default: string;
        };
        openOnClear: BooleanConstructor;
        readonly: BooleanConstructor;
        customFilter: vue.PropType<FilterFunction>;
        customKeyFilter: vue.PropType<FilterKeyFunctions>;
        filterKeys: {
            type: vue.PropType<(string & {}) | FilterKeys>;
            default: (string & {}) | FilterKeys;
        };
        filterMode: {
            type: vue.PropType<FilterMode>;
            default: string;
        };
        noFilter: BooleanConstructor;
        search: StringConstructor;
    }, "multiple" | "items" | "onUpdate:modelValue" | "modelValue" | "returnObject"> & SlotsToProps<Omit<MakeSlots<{
        default: [VInputSlot];
        prepend: [VInputSlot];
        append: [VInputSlot];
        details: [VInputSlot];
    }> & MakeSlots<{
        clear: [];
        'prepend-inner': [DefaultInputSlot & VInputSlot];
        'append-inner': [DefaultInputSlot & VInputSlot];
        label: [DefaultInputSlot & VInputSlot];
        loader: [LoaderSlotProps];
        default: [VFieldSlot];
    }>, "default"> & MakeSlots<{
        item: [{
            item: unknown;
            index: number;
            props: Record<string, unknown>;
        }];
        chip: [{
            item: unknown;
            index: number;
            props: Record<string, unknown>;
        }];
        selection: [{
            item: unknown;
            index: number;
        }];
        'no-data': [];
    }>>>> & {
        "onUpdate:menu"?: ((val: boolean) => any) | undefined;
        "onUpdate:search"?: ((val: any) => any) | undefined;
    } & vue.ShallowUnwrapRef<{
        isFocused: vue.Ref<boolean>;
        isPristine: vue.Ref<boolean>;
        menu: vue.Ref<boolean> & {
            readonly externalValue: boolean;
        };
        search: vue.Ref<string | undefined> & {
            readonly externalValue: string | undefined;
        };
        filteredItems: vue.ComputedRef<{
            item: InternalItem;
            matches: Record<string, FilterMatch>;
        }[]>;
        select: (item: any) => void;
    } & {
        [x: string]: any;
        [x: number]: any;
        [x: symbol]: any;
    }> & {} & vue.ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & vue.ComponentOptionsBase<Readonly<vue.ExtractPropTypes<Omit<{
    transition: Omit<{
        type: vue.PropType<string | boolean | (vue.TransitionProps & {
            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
        })>;
        default: string;
        validator: (val: unknown) => boolean;
    }, "type" | "default"> & {
        type: vue.PropType<string | boolean | (vue.TransitionProps & {
            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
        })>;
        default: string | boolean | (vue.TransitionProps & {
            component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
        });
    };
    items: {
        type: vue.PropType<any[]>;
        default: () => never[];
    };
    itemTitle: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemValue: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    itemChildren: Omit<{
        type: vue.PropType<SelectItemKey>;
        default: string;
    }, "type" | "default"> & {
        type: vue.PropType<SelectItemKey>;
        default: SelectItemKey;
    };
    itemProps: {
        type: vue.PropType<SelectItemKey>;
        default: string;
    };
    returnObject: BooleanConstructor;
    chips: BooleanConstructor;
    closableChips: BooleanConstructor;
    eager: BooleanConstructor;
    hideNoData: BooleanConstructor;
    hideSelected: BooleanConstructor;
    menu: BooleanConstructor;
    menuIcon: {
        type: vue.PropType<IconValue>;
        default: string;
    };
    menuProps: {
        type: vue.PropType<Partial<{
            transition: string | boolean | (vue.TransitionProps & {
                component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
            }) | {
                readonly component: vue.DefineComponent<{
                    target: vue.PropType<HTMLElement>;
                }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                    target: vue.PropType<HTMLElement>;
                }>>, {}>;
            };
            modelValue: boolean;
        }> & Omit<Readonly<vue.ExtractPropTypes<{
            transition: Omit<{
                type: vue.PropType<string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                })>;
                default: string;
                validator: (val: unknown) => boolean;
            }, "type" | "default"> & {
                type: vue.PropType<string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                }) | {
                    readonly component: vue.DefineComponent<{
                        target: vue.PropType<HTMLElement>;
                    }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                        target: vue.PropType<HTMLElement>;
                    }>>, {}>;
                }>;
                default: string | boolean | (vue.TransitionProps & {
                    component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
                }) | {
                    readonly component: vue.DefineComponent<{
                        target: vue.PropType<HTMLElement>;
                    }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
                        target: vue.PropType<HTMLElement>;
                    }>>, {}>;
                };
            };
            modelValue: BooleanConstructor;
            id: StringConstructor;
        } & SlotsToProps<MakeSlots<{
            default: [{
                isActive: vue.Ref<boolean>;
            }];
            activator: [{
                isActive: boolean;
                props: Record<string, any>;
            }];
        }>>>> & {
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        } & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, "transition" | "modelValue">>;
    };
    modelValue: {
        type: null;
        default: () => never[];
    };
    multiple: BooleanConstructor;
    noDataText: {
        type: StringConstructor;
        default: string;
    };
    openOnClear: BooleanConstructor;
    readonly: BooleanConstructor;
    customFilter: vue.PropType<FilterFunction>;
    customKeyFilter: vue.PropType<FilterKeyFunctions>;
    filterKeys: {
        type: vue.PropType<(string & {}) | FilterKeys>;
        default: (string & {}) | FilterKeys;
    };
    filterMode: {
        type: vue.PropType<FilterMode>;
        default: string;
    };
    noFilter: BooleanConstructor;
    search: StringConstructor;
}, "multiple" | "items" | "onUpdate:modelValue" | "modelValue" | "returnObject"> & SlotsToProps<Omit<MakeSlots<{
    default: [VInputSlot];
    prepend: [VInputSlot];
    append: [VInputSlot];
    details: [VInputSlot];
}> & MakeSlots<{
    clear: [];
    'prepend-inner': [DefaultInputSlot & VInputSlot];
    'append-inner': [DefaultInputSlot & VInputSlot];
    label: [DefaultInputSlot & VInputSlot];
    loader: [LoaderSlotProps];
    default: [VFieldSlot];
}>, "default"> & MakeSlots<{
    item: [{
        item: unknown;
        index: number;
        props: Record<string, unknown>;
    }];
    chip: [{
        item: unknown;
        index: number;
        props: Record<string, unknown>;
    }];
    selection: [{
        item: unknown;
        index: number;
    }];
    'no-data': [];
}>>>> & {
    "onUpdate:menu"?: ((val: boolean) => any) | undefined;
    "onUpdate:search"?: ((val: any) => any) | undefined;
}, {
    isFocused: vue.Ref<boolean>;
    isPristine: vue.Ref<boolean>;
    menu: vue.Ref<boolean> & {
        readonly externalValue: boolean;
    };
    search: vue.Ref<string | undefined> & {
        readonly externalValue: string | undefined;
    };
    filteredItems: vue.ComputedRef<{
        item: InternalItem;
        matches: Record<string, FilterMatch>;
    }[]>;
    select: (item: any) => void;
} & {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Omit<{
    'update:search': (val: any) => boolean;
    'update:modelValue': (val: any) => boolean;
    'update:menu': (val: boolean) => boolean;
}, "multiple" | "items" | "update:modelValue" | "modelValue" | "returnObject">, string, {
    transition: string | boolean | (vue.TransitionProps & {
        component?: vue.Component<any, any, any, vue.ComputedOptions, vue.MethodOptions> | undefined;
    });
    menu: boolean;
    eager: boolean;
    readonly: boolean;
    noDataText: string;
    itemTitle: SelectItemKey;
    itemValue: SelectItemKey;
    itemChildren: SelectItemKey;
    itemProps: SelectItemKey;
    chips: boolean;
    closableChips: boolean;
    hideNoData: boolean;
    hideSelected: boolean;
    menuIcon: IconValue;
    openOnClear: boolean;
    filterMode: FilterMode;
    noFilter: boolean;
    filterKeys: (string & {}) | FilterKeys;
}> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & (new <T, ReturnObject extends boolean = false, Multiple extends boolean = false, V extends Value<T, ReturnObject, Multiple> = Value<T, ReturnObject, Multiple>>() => {
    $props: {
        items?: readonly T[] | undefined;
        returnObject?: ReturnObject | undefined;
        multiple?: Multiple | undefined;
        modelValue?: Readonly<V> | undefined;
        'onUpdate:modelValue'?: ((val: V) => void) | undefined;
    };
    $slots: Omit<MakeSlots<{
        default: [VInputSlot];
        prepend: [VInputSlot];
        append: [VInputSlot];
        details: [VInputSlot];
    }> & MakeSlots<{
        clear: [];
        'prepend-inner': [DefaultInputSlot & VInputSlot];
        'append-inner': [DefaultInputSlot & VInputSlot];
        label: [DefaultInputSlot & VInputSlot];
        loader: [LoaderSlotProps];
        default: [VFieldSlot];
    }>, "default"> & MakeSlots<{
        item: [{
            item: T;
            index: number;
            props: Record<string, unknown>;
        }];
        chip: [{
            item: T;
            index: number;
            props: Record<string, unknown>;
        }];
        selection: [{
            item: T;
            index: number;
        }];
        'no-data': [];
    }>;
});
declare type VAutocomplete = InstanceType<typeof VAutocomplete>;

export { VAutocomplete };
