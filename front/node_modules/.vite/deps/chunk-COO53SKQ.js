import {
  VMenuSymbol,
  VOverlay,
  useScopeId
} from "./chunk-EDF6XJ4Z.js";
import {
  forwardRefs
} from "./chunk-LJBPEXTV.js";
import {
  VDialogTransition
} from "./chunk-QAGD4JHD.js";
import {
  VDefaultsProvider
} from "./chunk-KBCBN6IQ.js";
import {
  useProxiedModel
} from "./chunk-Z7H4O4HF.js";
import {
  makeTransitionProps
} from "./chunk-3IMRM6AM.js";
import {
  genericComponent,
  getUid,
  useRender
} from "./chunk-V72RWUGP.js";
import {
  computed,
  createVNode,
  inject,
  mergeProps,
  provide,
  ref,
  watch
} from "./chunk-BX7HPCYS.js";

// node_modules/vuetify/lib/components/VMenu/VMenu.mjs
import "C:/Users/Cuenta Bisite00/Documents/BISITE/prototypeApp/prototypeApp/front/node_modules/vuetify/lib/components/VMenu/VMenu.css";
var VMenu = genericComponent()({
  name: "VMenu",
  inheritAttrs: false,
  props: {
    modelValue: Boolean,
    id: String,
    ...makeTransitionProps({
      transition: {
        component: VDialogTransition
      }
    })
  },
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const {
      scopeId
    } = useScopeId();
    const uid = getUid();
    const id = computed(() => props.id || `v-menu-${uid}`);
    const overlay = ref();
    const parent = inject(VMenuSymbol, null);
    let openChildren = 0;
    provide(VMenuSymbol, {
      register() {
        ++openChildren;
      },
      unregister() {
        --openChildren;
      },
      closeParents() {
        setTimeout(() => {
          if (!openChildren) {
            isActive.value = false;
            parent == null ? void 0 : parent.closeParents();
          }
        }, 40);
      }
    });
    watch(isActive, (val) => {
      val ? parent == null ? void 0 : parent.register() : parent == null ? void 0 : parent.unregister();
    });
    function onClickOutside() {
      parent == null ? void 0 : parent.closeParents();
    }
    useRender(() => createVNode(VOverlay, mergeProps({
      "ref": overlay,
      "modelValue": isActive.value,
      "onUpdate:modelValue": ($event) => isActive.value = $event,
      "class": ["v-menu"],
      "transition": props.transition,
      "absolute": true,
      "closeOnContentClick": true,
      "locationStrategy": "connected",
      "scrollStrategy": "reposition",
      "scrim": false,
      "openDelay": "300",
      "closeDelay": "250",
      "activatorProps": {
        "aria-haspopup": "menu",
        "aria-expanded": String(isActive.value),
        "aria-owns": id.value
      },
      "onClick:outside": onClickOutside
    }, scopeId, attrs), {
      activator: slots.activator,
      default: () => {
        var _slots$default;
        return createVNode(VDefaultsProvider, {
          "root": true
        }, {
          default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
        });
      }
    }));
    return forwardRefs({
      id
    }, overlay);
  }
});

export {
  VMenu
};
//# sourceMappingURL=chunk-COO53SKQ.js.map
