import {
  makeLocationProps,
  makePositionProps,
  useLocation,
  usePosition
} from "./chunk-ZC427YHT.js";
import {
  Ripple
} from "./chunk-EZRIBUVA.js";
import {
  VDefaultsProvider
} from "./chunk-XGYNV5PJ.js";
import {
  makeRouterProps,
  useLink
} from "./chunk-5PEB2QDU.js";
import {
  makeBorderProps,
  makeElevationProps,
  useBorder,
  useElevation
} from "./chunk-JS7Y6QQM.js";
import {
  LoaderSlot,
  makeLoaderProps,
  useLoader
} from "./chunk-72CC6KJL.js";
import "./chunk-GX7R3KL3.js";
import "./chunk-XYLQFRMF.js";
import "./chunk-YJ6KMOY3.js";
import {
  VAvatar
} from "./chunk-LBVKPE4H.js";
import {
  genOverlays,
  makeVariantProps,
  useVariant
} from "./chunk-GURJUZG4.js";
import {
  makeDensityProps,
  useDensity
} from "./chunk-G5GHR6N3.js";
import "./chunk-HKK5SHVX.js";
import "./chunk-3AVUKXS4.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-AIBEQCC2.js";
import "./chunk-EHN6YYUB.js";
import {
  makeTagProps
} from "./chunk-4EGG5NBS.js";
import {
  VImg
} from "./chunk-TJS6B6E6.js";
import {
  makeDimensionProps,
  useDimension
} from "./chunk-7GNA6FCD.js";
import "./chunk-VLBVLHYG.js";
import "./chunk-466YNSCH.js";
import {
  IconValue
} from "./chunk-V2ZLN4G4.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-E634YU6E.js";
import {
  createSimpleFunctional,
  defineComponent as defineComponent2,
  provideDefaults,
  useRender
} from "./chunk-OB2LCWA7.js";
import {
  computed,
  createVNode,
  defineComponent,
  resolveDirective,
  withDirectives
} from "./chunk-BX7HPCYS.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VCard/VCard.mjs
import "C:/Users/Cuenta Bisite00/Documents/BISITE/prototypeApp/prototypeApp/front/node_modules/vuetify/lib/components/VCard/VCard.css";

// node_modules/vuetify/lib/components/VCard/VCardActions.mjs
var VCardActions = defineComponent2({
  name: "VCardActions",
  setup(_, _ref) {
    let {
      slots
    } = _ref;
    provideDefaults({
      VBtn: {
        variant: "text"
      }
    });
    useRender(() => {
      var _slots$default;
      return createVNode("div", {
        "class": "v-card-actions"
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VCard/VCardSubtitle.mjs
var VCardSubtitle = createSimpleFunctional("v-card-subtitle");

// node_modules/vuetify/lib/components/VCard/VCardTitle.mjs
var VCardTitle = createSimpleFunctional("v-card-title");

// node_modules/vuetify/lib/components/VCard/VCardItem.mjs
var VCardItem = defineComponent({
  name: "VCardItem",
  props: {
    appendAvatar: String,
    appendIcon: IconValue,
    prependAvatar: String,
    prependIcon: IconValue,
    subtitle: String,
    title: String,
    ...makeDensityProps()
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => {
      var _slots$prepend, _slots$title, _slots$subtitle, _slots$default, _slots$append;
      const hasPrepend = !!(props.prependAvatar || props.prependIcon || slots.prepend);
      const hasAppend = !!(props.appendAvatar || props.appendIcon || slots.append);
      const hasTitle = !!(props.title || slots.title);
      const hasSubtitle = !!(props.subtitle || slots.subtitle);
      return createVNode("div", {
        "class": "v-card-item"
      }, [hasPrepend && createVNode(VDefaultsProvider, {
        "key": "prepend",
        "defaults": {
          VAvatar: {
            density: props.density,
            icon: props.prependIcon,
            image: props.prependAvatar
          },
          VIcon: {
            density: props.density,
            icon: props.prependIcon
          }
        }
      }, {
        default: () => {
          var _a;
          return [createVNode("div", {
            "class": "v-card-item__prepend"
          }, [(_a = (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots)) != null ? _a : createVNode(VAvatar, null, null)])];
        }
      }), createVNode("div", {
        "class": "v-card-item__content"
      }, [hasTitle && createVNode(VCardTitle, {
        "key": "title"
      }, {
        default: () => {
          var _a;
          return [(_a = (_slots$title = slots.title) == null ? void 0 : _slots$title.call(slots)) != null ? _a : props.title];
        }
      }), hasSubtitle && createVNode(VCardSubtitle, {
        "key": "subtitle"
      }, {
        default: () => {
          var _a;
          return [(_a = (_slots$subtitle = slots.subtitle) == null ? void 0 : _slots$subtitle.call(slots)) != null ? _a : props.subtitle];
        }
      }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), hasAppend && createVNode(VDefaultsProvider, {
        "key": "append",
        "defaults": {
          VAvatar: {
            density: props.density,
            icon: props.appendIcon,
            image: props.appendAvatar
          },
          VIcon: {
            density: props.density,
            icon: props.appendIcon
          }
        }
      }, {
        default: () => {
          var _a;
          return [createVNode("div", {
            "class": "v-card-item__append"
          }, [(_a = (_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots)) != null ? _a : createVNode(VAvatar, null, null)])];
        }
      })]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VCard/VCardText.mjs
var VCardText = createSimpleFunctional("v-card-text");

// node_modules/vuetify/lib/components/VCard/VCard.mjs
var VCard = defineComponent2({
  name: "VCard",
  directives: {
    Ripple
  },
  props: {
    appendAvatar: String,
    appendIcon: IconValue,
    disabled: Boolean,
    flat: Boolean,
    hover: Boolean,
    image: String,
    link: {
      type: Boolean,
      default: void 0
    },
    prependAvatar: String,
    prependIcon: IconValue,
    ripple: Boolean,
    subtitle: String,
    text: String,
    title: String,
    ...makeThemeProps(),
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makeLoaderProps(),
    ...makeLocationProps(),
    ...makePositionProps(),
    ...makeRoundedProps(),
    ...makeRouterProps(),
    ...makeTagProps(),
    ...makeVariantProps({
      variant: "elevated"
    })
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      loaderClasses
    } = useLoader(props);
    const {
      locationStyles
    } = useLocation(props);
    const {
      positionClasses
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const link = useLink(props, attrs);
    const isLink = computed(() => props.link !== false && link.isLink.value);
    const isClickable = computed(() => !props.disabled && props.link !== false && (props.link || link.isClickable.value));
    useRender(() => {
      var _slots$image, _slots$text, _slots$default;
      const Tag = isLink.value ? "a" : props.tag;
      const hasTitle = !!(slots.title || props.title);
      const hasSubtitle = !!(slots.subtitle || props.subtitle);
      const hasHeader = hasTitle || hasSubtitle;
      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon);
      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon);
      const hasImage = !!(slots.image || props.image);
      const hasCardItem = hasHeader || hasPrepend || hasAppend;
      const hasText = !!(slots.text || props.text);
      return withDirectives(createVNode(Tag, {
        "class": ["v-card", {
          "v-card--disabled": props.disabled,
          "v-card--flat": props.flat,
          "v-card--hover": props.hover && !(props.disabled || props.flat),
          "v-card--link": isClickable.value
        }, themeClasses.value, borderClasses.value, colorClasses.value, densityClasses.value, elevationClasses.value, loaderClasses.value, positionClasses.value, roundedClasses.value, variantClasses.value],
        "style": [colorStyles.value, dimensionStyles.value, locationStyles.value],
        "href": link.href.value,
        "onClick": isClickable.value && link.navigate
      }, {
        default: () => [hasImage && createVNode(VDefaultsProvider, {
          "key": "image",
          "defaults": {
            VImg: {
              cover: true,
              src: props.image
            }
          }
        }, {
          default: () => {
            var _a;
            return [createVNode("div", {
              "class": "v-card__image"
            }, [(_a = (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots)) != null ? _a : createVNode(VImg, null, null)])];
          }
        }), createVNode(LoaderSlot, {
          "name": "v-card",
          "active": !!props.loading,
          "color": typeof props.loading === "boolean" ? void 0 : props.loading
        }, {
          default: slots.loader
        }), hasCardItem && createVNode(VCardItem, {
          "key": "item",
          "prependAvatar": props.prependAvatar,
          "prependIcon": props.prependIcon,
          "title": props.title,
          "subtitle": props.subtitle,
          "appendAvatar": props.appendAvatar,
          "appendIcon": props.appendIcon
        }, {
          default: slots.item,
          prepend: slots.prepend,
          title: slots.title,
          subtitle: slots.subtitle,
          append: slots.append
        }), hasText && createVNode(VCardText, {
          "key": "text"
        }, {
          default: () => {
            var _a;
            return [(_a = (_slots$text = slots.text) == null ? void 0 : _slots$text.call(slots)) != null ? _a : props.text];
          }
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), slots.actions && createVNode(VCardActions, null, {
          default: slots.actions
        }), genOverlays(isClickable.value, "v-card")]
      }), [[resolveDirective("ripple"), isClickable.value]]);
    });
    return {};
  }
});
export {
  VCard,
  VCardActions,
  VCardItem,
  VCardSubtitle,
  VCardText,
  VCardTitle
};
//# sourceMappingURL=vuetify_lib_components_VCard_index__mjs.js.map
