import {
  DisplaySymbol,
  createDisplay,
  useDisplay
} from "./chunk-J4PGKZLH.js";
import {
  LocaleAdapterSymbol,
  createLocale,
  useLocale
} from "./chunk-FND3FRNN.js";
import {
  useLayout
} from "./chunk-23H3GJLW.js";
import "./chunk-CMO6PQJ4.js";
import {
  RtlSymbol,
  provideRtl,
  useRtl
} from "./chunk-YJ6KMOY3.js";
import {
  IconSymbol,
  createIcons
} from "./chunk-OVA7IPAR.js";
import {
  ThemeSymbol,
  createTheme,
  useTheme
} from "./chunk-EVWLYFE4.js";
import {
  DefaultsSymbol,
  IN_BROWSER,
  createDefaults,
  defineComponent,
  getUid,
  mergeDeep
} from "./chunk-V72RWUGP.js";
import {
  reactive
} from "./chunk-BX7HPCYS.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/framework.mjs
var createVuetify = function() {
  let vuetify = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const install = (app) => {
    const {
      blueprint,
      ...rest
    } = vuetify;
    const options = mergeDeep(blueprint, rest);
    const {
      aliases = {},
      components = {},
      directives = {}
    } = options;
    for (const key in directives) {
      app.directive(key, directives[key]);
    }
    for (const key in components) {
      app.component(key, components[key]);
    }
    for (const key in aliases) {
      app.component(key, defineComponent({
        ...aliases[key],
        name: key,
        aliasName: aliases[key].name
      }));
    }
    function provideApp(isHydrate) {
      app.provide(DefaultsSymbol, createDefaults(options.defaults));
      app.provide(DisplaySymbol, createDisplay(options.display, isHydrate));
      app.provide(ThemeSymbol, createTheme(app, options.theme));
      app.provide(IconSymbol, createIcons(options.icons));
      app.provide(LocaleAdapterSymbol, createLocale(app, options.locale));
    }
    if (!IN_BROWSER) {
      provideApp();
    }
    getUid.reset();
    const mount = app.mount;
    app.mount = (rootContainer, isHydrate, isSVG) => {
      provideApp(isHydrate);
      const ret = mount(rootContainer, isHydrate, isSVG);
      app.mount = mount;
      return ret;
    };
    function inject(key) {
      var _a;
      var _vm$parent, _vm$vnode$appContext;
      const vm = this.$;
      const provides = (_a = (_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) != null ? _a : (_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides;
      if (provides && key in provides) {
        return provides[key];
      }
    }
    app.mixin({
      computed: {
        $vuetify() {
          return reactive({
            defaults: inject.call(this, DefaultsSymbol),
            display: inject.call(this, DisplaySymbol),
            theme: inject.call(this, ThemeSymbol),
            icons: inject.call(this, IconSymbol),
            locale: inject.call(this, LocaleAdapterSymbol),
            rtl: inject.call(this, RtlSymbol)
          });
        }
      }
    });
  };
  return {
    install
  };
};
var version = "3.0.0-next-20220917.0";
createVuetify.version = version;
export {
  createVuetify,
  provideRtl,
  useDisplay,
  useLayout,
  useLocale,
  useRtl,
  useTheme,
  version
};
//# sourceMappingURL=vuetify.js.map
