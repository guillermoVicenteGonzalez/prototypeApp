{
  "version": 3,
  "sources": ["../../vuetify/src/components/VFileInput/VFileInput.tsx"],
  "sourcesContent": ["// Styles\nimport './VFileInput.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VChip } from '@/components/VChip'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, ref } from 'vue'\nimport { callEvent, defineComponent, filterInputAttrs, humanReadableFileSize, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VFileInput = defineComponent({\n  name: 'VFileInput',\n\n  inheritAttrs: false,\n\n  props: {\n    chips: Boolean,\n    counter: Boolean,\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize',\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter',\n    },\n    multiple: Boolean,\n    hint: String,\n    persistentHint: Boolean,\n    placeholder: String,\n    showSize: {\n      type: [Boolean, Number] as PropType<boolean | 1000 | 1024>,\n      default: false,\n      validator: (v: boolean | number) => {\n        return (\n          typeof v === 'boolean' ||\n          [1000, 1024].includes(v)\n        )\n      },\n    },\n\n    ...makeVInputProps({ prependIcon: '$file' }),\n\n    modelValue: {\n      type: Array as PropType<File[]>,\n      default: () => ([]),\n      validator: (val: any) => {\n        return wrapInArray(val).every(v => v != null && typeof v === 'object')\n      },\n    },\n\n    ...makeVFieldProps({ clearable: true }),\n  },\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'update:modelValue': (files: File[]) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { t } = useLocale()\n    const model = useProxiedModel(props, 'modelValue')\n    const base = computed(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined)\n    const totalBytes = computed(() => (model.value ?? []).reduce((bytes, { size = 0 }) => bytes + size, 0))\n    const totalBytesReadable = computed(() => humanReadableFileSize(totalBytes.value, base.value))\n\n    const fileNames = computed(() => (model.value ?? []).map(file => {\n      const { name = '', size = 0 } = file\n\n      return !props.showSize\n        ? name\n        : `${name} (${humanReadableFileSize(size, base.value)})`\n    }))\n\n    const counterValue = computed(() => {\n      const fileCount = model.value?.length ?? 0\n      if (props.showSize) return t(props.counterSizeString, fileCount, totalBytesReadable.value)\n      else return t(props.counterString, fileCount)\n    })\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const isFocused = ref(false)\n    const inputRef = ref<HTMLInputElement>()\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) {\n        isFocused.value = true\n      }\n    }\n    function onClickPrepend (e: MouseEvent) {\n      callEvent(props['onClick:prepend'], e)\n      onControlClick(e)\n    }\n    function onControlClick (e: MouseEvent) {\n      inputRef.value?.click()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = []\n\n        if (inputRef?.value) {\n          inputRef.value.value = ''\n        }\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class=\"v-file-input\"\n          onClick:prepend={ onClickPrepend }\n          onClick:append={ props['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                prepend-icon={ props.prependIcon }\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                { ...fieldProps }\n                active={ isDirty.value || isFocused.value }\n                dirty={ isDirty.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      <input\n                        ref={ inputRef }\n                        type=\"file\"\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        multiple={ props.multiple }\n                        name={ props.name }\n                        onClick={ e => {\n                          e.stopPropagation()\n\n                          onFocus()\n                        } }\n                        onChange={ e => {\n                          if (!e.target) return\n\n                          const target = e.target as HTMLInputElement\n                          model.value = [...target.files ?? []]\n                        } }\n                        onFocus={ onFocus }\n                        onBlur={ () => (isFocused.value = false) }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      <div class={ fieldClass }>\n                        { model.value.length > 0 && (\n                          slots.selection ? slots.selection({\n                            fileNames: fileNames.value,\n                            totalBytes: totalBytes.value,\n                            totalBytesReadable: totalBytesReadable.value,\n                          })\n                          : props.chips ? fileNames.value.map(text => (\n                            <VChip\n                              key={ text }\n                              size=\"small\"\n                              color={ props.color }\n                            >{ text }</VChip>\n                          ))\n                          : fileNames.value.join(', ')\n                        )}\n                      </div>\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ !!model.value.length }\n                      value={ counterValue.value }\n                      v-slots={ slots.counter }\n                    />\n                  </>\n                ) }\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VFileInput = InstanceType<typeof VFileInput>\n"],
  "mappings": "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",
  "names": ["VFileInput", "defineComponent", "name", "inheritAttrs", "props", "chips", "Boolean", "counter", "counterSizeString", "type", "String", "default", "counterString", "multiple", "hint", "persistentHint", "placeholder", "showSize", "Number", "validator", "v", "includes", "makeVInputProps", "prependIcon", "modelValue", "Array", "val", "wrapInArray", "every", "makeVFieldProps", "clearable", "emits", "e", "files", "setup", "attrs", "emit", "slots", "t", "useLocale", "model", "useProxiedModel", "base", "computed", "undefined", "totalBytes", "value", "reduce", "bytes", "size", "totalBytesReadable", "humanReadableFileSize", "fileNames", "map", "file", "counterValue", "fileCount", "length", "vInputRef", "ref", "vFieldRef", "isFocused", "inputRef", "messages", "onFocus", "document", "activeElement", "focus", "onClickPrepend", "callEvent", "onControlClick", "click", "onClear", "stopPropagation", "nextTick", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "_", "inputProps", "filterInputProps", "fieldProps", "filterFieldProps", "isDisabled", "isDirty", "isReadonly", "isValid", "class", "fieldClass", "slotProps", "target", "selection", "text", "color", "join", "forwardRefs"]
}
